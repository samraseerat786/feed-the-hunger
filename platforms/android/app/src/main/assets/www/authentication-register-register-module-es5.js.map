{"version":3,"sources":["./src/app/authentication/register/register.page.html","./src/app/authentication/register/register.module.ts","./src/app/authentication/register/register.page.scss","./src/app/authentication/register/register.page.ts"],"names":[],"mappings":"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","file":"authentication-register-register-module-es5.js","sourcesContent":["module.exports = \"<ion-header class=\\\"ion-text-center\\\">\\r\\n    <ion-toolbar color=\\\"secondary\\\">\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>Sign Up</ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n    <form [formGroup]=\\\"registerForm\\\">\\r\\n        <ion-grid>\\r\\n            <ion-row class=\\\"ion-justify-content-center\\\">\\r\\n                <ion-col class=\\\"ion-align-self-center\\\" size-md=\\\"9\\\" size-lg=\\\"8\\\" size-xl=\\\"6\\\" size-xs=\\\"12\\\" size-sm=\\\"10\\\">\\r\\n                    <div class=\\\"ion-text-center\\\">\\r\\n                        <h3>Create your account!</h3>\\r\\n                    </div>\\r\\n                    <div class=\\\"ion-padding\\\">\\r\\n                        <ion-item>\\r\\n                            <ion-input name=\\\"firstName\\\" formControlName=\\\"first_name\\\" type=\\\"text\\\"\\r\\n                                       placeholder=\\\"First Name\\\"></ion-input>\\r\\n                        </ion-item>\\r\\n                        <div>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"registerFormControl.first_name.touched && registerFormControl.first_name.errors?.required\\\">First name required.</span>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"registerFormControl.first_name.touched && registerFormControl.first_name.errors?.pattern\\\">Enter only Alphabets.</span>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('first_name').hasError('minlength')\\\">Enter at least 3 charecters.</span>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('first_name').hasError('maxlength')\\\">Enter 20 charecters maximum.</span>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"submitted && registerFormControl.first_name.errors?.required\\\">First name required.</span>\\r\\n                        </div>\\r\\n                        <ion-item>\\r\\n                            <ion-input name=\\\"lastName\\\" formControlName=\\\"last_name\\\" type=\\\"text\\\"\\r\\n                                       placeholder=\\\"Last Name\\\"></ion-input>\\r\\n                        </ion-item>\\r\\n                        <div>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"registerFormControl.last_name.touched && registerFormControl.last_name.errors?.required\\\">First name required.</span>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"registerFormControl.last_name.touched && registerFormControl.last_name.errors?.pattern\\\">Enter only Alphabets.</span>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('last_name').hasError('minlength')\\\">Enter at least 3 charecters.</span>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('last_name').hasError('maxlength')\\\">Enter 20 charecters maximum.</span>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"submitted && registerFormControl.last_name.errors?.required\\\">Last name required.</span>\\r\\n                        </div>\\r\\n                        <ion-item>\\r\\n                            <ion-input (focusout)=\\\"onFoucusOut()\\\" (keyup)=\\\"removeError()\\\" (change)=\\\"checkEmail()\\\"\\r\\n                                       name=\\\"email\\\" formControlName=\\\"email\\\" type=\\\"email\\\"\\r\\n                                       placeholder=\\\"your@email.com\\\"></ion-input>\\r\\n                            <ion-spinner color=\\\"secondary\\\" name=\\\"lines\\\" *ngIf=\\\"mailloading\\\"></ion-spinner>\\r\\n                        </ion-item>\\r\\n                        <div *ngIf=\\\"emailVerification\\\">\\r\\n                            <span class=\\\"text-danger\\\">User with that email is already exists.<br> Enter another email</span>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"emailEmptyCheck\\\">\\r\\n                            <span class=\\\"text-danger\\\">You can't enter only white space.</span>\\r\\n                        </div>\\r\\n                        <div>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.email.errors?.required\\\">Email is required.</span>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('email').hasError('pattern')\\\">You can enter alphabets numeric value and spacial character and dot.</span>\\r\\n                        </div>\\r\\n                        <ion-item>\\r\\n                            <ion-input (focusout)=\\\"onFoucusOutUsername()\\\" (keyup)=\\\"removeErrorUsername()\\\"\\r\\n                                       (change)=\\\"checkUsername()\\\" name=\\\"username\\\" formControlName=\\\"user_name\\\"\\r\\n                                       type=\\\"text\\\" placeholder=\\\"username\\\"></ion-input>\\r\\n                        </ion-item>\\r\\n                        <div *ngIf=\\\"usernameVerification\\\">\\r\\n                            <span class=\\\"text-danger\\\">User with that username is already exists.<br> Enter another username</span>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"usernameEmptyCheck\\\">\\r\\n                            <span class=\\\"text-danger\\\">You can't enter only white space.</span>\\r\\n                        </div>\\r\\n                        <div>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"submitted && registerFormControl.user_name.errors?.required\\\">username is required.</span>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('user_name').hasError('pattern')\\\">You can enter alphabets numeric value for username.</span>\\r\\n                        </div>\\r\\n                        <ion-item>\\r\\n                            <ion-input placeholder=\\\"Password\\\" formControlName=\\\"password\\\" [type]=\\\"passwordType\\\"\\r\\n                                       clearOnEdit=\\\"false\\\"></ion-input>\\r\\n                            <ion-icon item-end [name]=\\\"passwordIcon\\\" class=\\\"passwordIcon\\\" (click)='hideShowPassword()'\\r\\n                                      color=\\\"secondary\\\"></ion-icon>\\r\\n                        </ion-item>\\r\\n                        <div>\\r\\n                            <ion-label class=\\\"text-danger\\\"\\r\\n                                       *ngIf=\\\"submitted && registerFormControl.password.errors?.required\\\">password is\\r\\n                                required.\\r\\n                            </ion-label>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('password').hasError('minlength')\\\">Minimum length of password should 5.</span>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('password').hasError('pattern')\\\">Enter alpha numeric value for password.</span>\\r\\n                        </div>\\r\\n                        <ion-item>\\r\\n                            <ion-input (keyup)=\\\"removePasswordMatchError()\\\" (focusout)=\\\"matchPasswords()\\\"\\r\\n                                       placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirm_password\\\"\\r\\n                                       [type]=\\\"passwordType\\\" clearOnEdit=\\\"false\\\"></ion-input>\\r\\n                            <ion-icon item-end [name]=\\\"passwordIcon\\\" class=\\\"passwordIcon\\\" (click)='hideShowPassword()'\\r\\n                                      color=\\\"secondary\\\"></ion-icon>\\r\\n                        </ion-item>\\r\\n                        <div>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"submitted && registerFormControl.confirm_password.errors?.required\\\">confirm password is required.</span>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"registerFormControl.confirm_password.touched && registerForm.get('confirm_password').hasError('mismatchedPasswords')\\\">Password and confirm password should match.</span>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"passwordMatch\\\">\\r\\n                            <span class=\\\"text-danger\\\">Password and confirm password should match.</span>\\r\\n                        </div>\\r\\n                        <ion-item>\\r\\n                            <ion-label position=\\\"floating\\\">User Role</ion-label>\\r\\n                            <ion-select value=\\\"Donner\\\" formControlName=\\\"role\\\" placeholder=\\\"--Select--\\\" okText=\\\"Okay\\\"\\r\\n                                        cancelText=\\\"Dismiss\\\">\\r\\n                                <ion-select-option value=\\\"donner\\\">Donner</ion-select-option>\\r\\n                                <ion-select-option value=\\\"charity house\\\">Charity House</ion-select-option>\\r\\n                            </ion-select>\\r\\n                        </ion-item>\\r\\n                        <div>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.role.errors?.required\\\">Please ! select your user role.</span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"ion-padding\\\">\\r\\n                        <ion-button (click)=\\\"loadForm()\\\" color=\\\"primary\\\" type=\\\"submit\\\" expand=\\\"block\\\">Proceed &nbsp;&nbsp;&nbsp;<ion-spinner\\r\\n                                name=\\\"lines\\\" *ngIf=\\\"loading\\\"></ion-spinner>\\r\\n                        </ion-button>\\r\\n                    </div>\\r\\n                </ion-col>\\r\\n            </ion-row>\\r\\n        </ion-grid>\\r\\n    </form>\\r\\n</ion-content>\\r\\n\"","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {Routes, RouterModule} from '@angular/router';\r\n\r\nimport {IonicModule} from '@ionic/angular';\r\n\r\nimport {RegisterPage} from './register.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: RegisterPage\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        IonicModule,\r\n        RouterModule.forChild(routes),\r\n        ReactiveFormsModule,\r\n    ],\r\n    declarations: [RegisterPage]\r\n})\r\nexport class RegisterPageModule {\r\n}\r\n","module.exports = \".passwordIcon {\\n  font-size: 2rem !important;\\n  position: relative !important;\\n  top: 0px !important;\\n  margin: 0 auto !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aGVudGljYXRpb24vcmVnaXN0ZXIvRDpcXEZZUFxcZmVlZC10aGUtaHVuZGVyL3NyY1xcYXBwXFxhdXRoZW50aWNhdGlvblxccmVnaXN0ZXJcXHJlZ2lzdGVyLnBhZ2Uuc2NzcyIsInNyYy9hcHAvYXV0aGVudGljYXRpb24vcmVnaXN0ZXIvcmVnaXN0ZXIucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsMEJBQUE7RUFDQSw2QkFBQTtFQUNBLG1CQUFBO0VBQ0EseUJBQUE7QUNDRiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL3JlZ2lzdGVyL3JlZ2lzdGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wYXNzd29yZEljb24ge1xyXG4gIGZvbnQtc2l6ZTogMnJlbSAhaW1wb3J0YW50O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZSAhaW1wb3J0YW50O1xyXG4gIHRvcDogMHB4ICFpbXBvcnRhbnQ7XHJcbiAgbWFyZ2luOiAwIGF1dG8gIWltcG9ydGFudDtcclxufVxyXG4iLCIucGFzc3dvcmRJY29uIHtcbiAgZm9udC1zaXplOiAycmVtICFpbXBvcnRhbnQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZSAhaW1wb3J0YW50O1xuICB0b3A6IDBweCAhaW1wb3J0YW50O1xuICBtYXJnaW46IDAgYXV0byAhaW1wb3J0YW50O1xufSJdfQ== */\"","import {Component, OnInit} from '@angular/core';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {ListService} from '../../services/list.service';\r\nimport {UtilsService} from \"../../services/utils.service\";\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.page.html',\r\n    styleUrls: ['./register.page.scss'],\r\n})\r\nexport class RegisterPage implements OnInit {\r\n    constructor(private utils: UtilsService,\r\n                private router: Router,\r\n                private http: HttpClient,\r\n                private service: ListService,\r\n                private formBuilder: FormBuilder\r\n    ) {\r\n    }\r\n\r\n    get registerFormControl() {\r\n        return this.registerForm.controls;\r\n    }\r\n\r\n    registerForm: FormGroup;\r\n    passwordType = 'password';\r\n    passwordIcon = 'eye-off';\r\n    loading: boolean;\r\n    submitted = false;\r\n    obj1;\r\n    obj2;\r\n    results: any;\r\n    donnerList;\r\n    mailloading: boolean;\r\n    usernameVerification = false;\r\n    usernameEmptyCheck = false;\r\n    emailVerification = false;\r\n    emailEmptyCheck = false;\r\n    passwordMatch = false;\r\n\r\n    ngOnInit() {\r\n        this.formInitializer();\r\n        // this.loading = true;\r\n    }\r\n\r\n    hideShowPassword() {\r\n        this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\r\n        this.passwordIcon = this.passwordIcon === 'eye-off' ? 'eye' : 'eye-off';\r\n    }\r\n\r\n    formInitializer() {\r\n        const EMAILPATTERN = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\r\n        this.registerForm = this.formBuilder.group({\r\n            first_name: [null, [Validators.required, Validators.pattern('[a-zA-Z ]*'), Validators.minLength(3), Validators.maxLength(20)]],\r\n            last_name: [null, [Validators.required, Validators.pattern('[a-zA-Z ]*'), Validators.minLength(3), Validators.maxLength(20)]],\r\n            email: [null, [Validators.required, Validators.pattern(EMAILPATTERN)]],\r\n            user_name: [null, [Validators.required, Validators.pattern('^(?=.*[a-zA-Z])[a-zA-Z0-9]+$')]],\r\n            role: [null, [Validators.required]],\r\n            password: ['', Validators.compose([Validators.required, Validators.minLength(5)])],\r\n            confirm_password: [\r\n                '',\r\n                [\r\n                    Validators.required,\r\n                    // this.mismatchedPasswords('password')\r\n                ]\r\n            ]\r\n        });\r\n    }\r\n\r\n    mismatchedPasswords(otherControlName: string) {\r\n        return (control: AbstractControl): { [key: string]: any } => {\r\n            const otherControl: AbstractControl = control.root.get(otherControlName);\r\n\r\n            if (otherControl) {\r\n                const subscription: Subscription = otherControl.valueChanges.subscribe(\r\n                    () => {\r\n                        control.updateValueAndValidity();\r\n                        subscription.unsubscribe();\r\n                    }\r\n                );\r\n            }\r\n            return otherControl && control.value !== otherControl.value\r\n                ? {match: true}\r\n                : null;\r\n        };\r\n    }\r\n\r\n    loadForm() {\r\n        this.submitted = true;\r\n        this.loading = true;\r\n        if (!this.registerForm.valid) {\r\n            this.utils.presentAlert('Please provide all the required a valid values!');\r\n            return false;\r\n        } else {\r\n            const data = this.registerForm.value;\r\n            if (data.role === 'donner') {\r\n                const userData = this.registerForm.value;\r\n                this.loading = false;\r\n                this.router.navigate(['register-donner', userData]);\r\n            }\r\n            if (data.role === 'charity house') {\r\n                const userData = this.registerForm.value;\r\n                this.loading = false;\r\n                this.router.navigate(['register-charity-house', userData]);\r\n            }\r\n        }\r\n    }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        if (this.registerForm.valid) {\r\n            this.utils.presentAlert('Form Submitted succesfully!!!');\r\n            console.table(this.registerForm.value);\r\n        }\r\n    }\r\n\r\n    async checkEmail() {\r\n        this.mailloading = true;\r\n        const test = this.registerForm.value;\r\n        const item = test.email;\r\n        if (item) {\r\n            await this.utils.presentLoading(\"Please wait...\");\r\n            this.http.get(`${this.service.homeUrl}/users/email/${item}`,\r\n                {observe: 'response'}).subscribe(response => {\r\n                this.utils.stopLoading();\r\n                if (response.status === 200 || response.status === 201) {\r\n                    const tester = response.body;\r\n                    if (tester.toString() === 'false') {\r\n                        this.emailVerification = true;\r\n                        this.mailloading = false;\r\n                    }\r\n                    this.mailloading = false;\r\n                }\r\n            }, (error) => {\r\n                this.utils.stopLoading();\r\n                console.log('error.', error);\r\n            });\r\n            this.mailloading = false;\r\n        }\r\n        this.mailloading = false;\r\n    }\r\n\r\n    onFoucusOut() {\r\n        const test = this.registerForm.value;\r\n        const item = test.email;\r\n        const str = '    ';\r\n        if (!str.replace(/\\s/g, '').length) {\r\n        }\r\n        if (item === '' || item == null) {\r\n            this.emailEmptyCheck = true;\r\n        }\r\n    }\r\n\r\n    removeError() {\r\n        this.emailVerification = false;\r\n        this.emailEmptyCheck = false;\r\n    }\r\n\r\n    async checkUsername() {\r\n        const test = this.registerForm.value;\r\n        const item = test.user_name;\r\n        if (item) {\r\n            await this.utils.presentLoading(\"Please wait...\");\r\n            this.http.get(`${this.service.homeUrl}/users/username/${item}`,\r\n                {observe: 'response'}).subscribe(response => {\r\n                this.utils.stopLoading();\r\n                if (response.status === 200 || response.status === 201) {\r\n                    const tester = response.body;\r\n                    if (tester.toString() === 'false') {\r\n                        this.usernameVerification = true;\r\n                        this.loading = false;\r\n                    }\r\n                    this.loading = false;\r\n                }\r\n            }, (error) => {\r\n                this.utils.stopLoading();\r\n                console.log('error.', error);\r\n            });\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    onFoucusOutUsername() {\r\n        const test = this.registerForm.value;\r\n        const item = test.user_name;\r\n        const str = '    ';\r\n        if (!str.replace(/\\s/g, '').length) {\r\n        }\r\n        if (item === '' || item == null) {\r\n            this.usernameEmptyCheck = true;\r\n        }\r\n    }\r\n\r\n    removeErrorUsername() {\r\n        this.usernameVerification = false;\r\n        this.usernameEmptyCheck = false;\r\n    }\r\n\r\n    matchPasswords() {\r\n        const data = this.registerForm.value;\r\n        if (data.password === data.confirm_password) {\r\n            this.passwordMatch = false;\r\n        } else {\r\n            this.passwordMatch = true;\r\n        }\r\n    }\r\n\r\n    removePasswordMatchError() {\r\n        this.passwordMatch = false;\r\n    }\r\n}\r\n"],"sourceRoot":""}