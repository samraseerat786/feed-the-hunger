{"version":3,"sources":["./src/app/authentication/register-donner/register-donner.page.html","./src/app/authentication/register-donner/register-donner.module.ts","./src/app/authentication/register-donner/register-donner.page.scss","./src/app/authentication/register-donner/register-donner.page.ts"],"names":[],"mappings":"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","file":"authentication-register-donner-register-donner-module-es2015.js","sourcesContent":["module.exports = \"<ion-header class=\\\"ion-text-center\\\">\\r\\n    <ion-toolbar color=\\\"secondary\\\">\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>Sign Up</ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n    <form [formGroup]=\\\"registerDonnerForm\\\">\\r\\n        <ion-grid>\\r\\n            <ion-row class=\\\"ion-justify-content-center\\\">\\r\\n                <ion-col class=\\\"ion-align-self-center\\\" size-md=\\\"9\\\" size-lg=\\\"8\\\" size-xl=\\\"6\\\" size-xs=\\\"12\\\" size-sm=\\\"10\\\">\\r\\n                    <div class=\\\"ion-text-center\\\">\\r\\n                        <h3>Enter Donner Details!</h3>\\r\\n                    </div>\\r\\n                    <div class=\\\"ion-padding\\\">\\r\\n                        <ion-item>\\r\\n                            <ion-label position=\\\"floating\\\">Address</ion-label>\\r\\n                            <ion-input (focusout)=\\\"onFoucusOut()\\\" (keyup)=\\\"removeError()\\\"\\r\\n                                       formControlName=\\\"address\\\"></ion-input>\\r\\n                        </ion-item>\\r\\n                        <div>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"registerDonnerFormControl.address.touched && registerDonnerFormControl.address.errors?.required\\\">Address required.</span>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"submitted && registerDonnerFormControl.address.errors?.required\\\">address required.</span>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"addressVerification\\\">\\r\\n                            <span class=\\\"text-danger\\\">You can't enter only white space.</span>\\r\\n                        </div>\\r\\n                        <ion-item>\\r\\n                            <ion-label position=\\\"floating\\\">Contact</ion-label>\\r\\n                            <ion-input (focus)=\\\"onFoucusOutContact()\\\" (keyup)=\\\"removeErrorContact()\\\"\\r\\n                                       formControlName=\\\"contact\\\"></ion-input>\\r\\n                        </ion-item>\\r\\n                        <div>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"registerDonnerFormControl.contact.touched && registerDonnerFormControl.contact.errors?.required\\\">Contact required.</span>\\r\\n                            <span class=\\\"text-danger\\\"\\r\\n                                  *ngIf=\\\"submitted && registerDonnerFormControl.contact.errors?.required\\\">Contact required.</span>\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerDonnerForm.get('contact').hasError('pattern')\\\">Enter Only digits for contact.</span>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"contactEmptyCheck\\\">\\r\\n                            <span class=\\\"text-danger\\\">You can't enter only white space.</span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"ion-padding\\\">\\r\\n                        <ion-button [disabled]=\\\"registerDonnerForm.invalid\\\" (click)=\\\"registerDonner()\\\" color=\\\"primary\\\"\\r\\n                                    type=\\\"submit\\\" expand=\\\"block\\\">Register\\r\\n                        </ion-button>\\r\\n                    </div>\\r\\n                </ion-col>\\r\\n            </ion-row>\\r\\n        </ion-grid>\\r\\n    </form>\\r\\n</ion-content>\\r\\n\"","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {Routes, RouterModule} from '@angular/router';\r\n\r\nimport {IonicModule} from '@ionic/angular';\r\n\r\nimport {RegisterDonnerPage} from './register-donner.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: RegisterDonnerPage\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        IonicModule,\r\n        RouterModule.forChild(routes),\r\n        ReactiveFormsModule\r\n    ],\r\n    declarations: [RegisterDonnerPage]\r\n})\r\nexport class RegisterDonnerPageModule {\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL3JlZ2lzdGVyLWRvbm5lci9yZWdpc3Rlci1kb25uZXIucGFnZS5zY3NzIn0= */\"","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {ListService} from '../../services/list.service';\r\nimport {UtilsService} from \"../../services/utils.service\";\r\n\r\n@Component({\r\n    selector: 'app-register-donner',\r\n    templateUrl: './register-donner.page.html',\r\n    styleUrls: ['./register-donner.page.scss'],\r\n})\r\nexport class RegisterDonnerPage implements OnInit {\r\n\r\n    private JSONObject;\r\n    registerDonnerForm: FormGroup;\r\n    today = new Date();\r\n    date;\r\n    obj;\r\n    user;\r\n    donner;\r\n    addressVerification = false;\r\n    contactEmptyCheck = false;\r\n    private loading: boolean;\r\n\r\n    constructor(private utils: UtilsService,\r\n                private route: ActivatedRoute,\r\n                private http: HttpClient,\r\n                private formBuilder: FormBuilder,\r\n                private service: ListService,\r\n                private router: Router) {\r\n    }\r\n\r\n    data: Observable<any>;\r\n    charityHouse: any;\r\n    submitted: any;\r\n\r\n    ngOnInit() {\r\n        this.route.paramMap.subscribe(paramMap => {\r\n            this.obj = paramMap.get('first_name');\r\n            console.log('reciving data', this.obj);\r\n            this.user = '\"user\" : {\"first_name\" : \"' + paramMap.get('first_name') +\r\n                '\" , \"last_name\" : \"' + paramMap.get('last_name') +\r\n                '\" , \"email\" : \"' + paramMap.get('email') +\r\n                '\" , \"user_name\" : \"' + paramMap.get('user_name') +\r\n                '\" , \"password\" : \"' + paramMap.get('password') +\r\n                '\" , \"role\"  : \"' + paramMap.get('role') + '\"}';\r\n        });\r\n        this.formInitializer();\r\n    }\r\n\r\n    formInitializer() {\r\n        this.registerDonnerForm = this.formBuilder.group({\r\n            address: [null, [Validators.required]],\r\n            contact: [null, [Validators.required, Validators.pattern('[0-9 ]*')]]\r\n        });\r\n    }\r\n\r\n    get registerDonnerFormControl() {\r\n        return this.registerDonnerForm.controls;\r\n    }\r\n\r\n    async registerDonner() {\r\n        this.submitted = true;\r\n        if (this.registerDonnerForm.valid) {\r\n            this.loading = true;\r\n            const formData = this.registerDonnerForm.value;\r\n            this.donner = '{\"address\" : \"' + formData.address +\r\n                '\", \\n\"contact\" : \"' + formData.contact +\r\n                '\", \\n' + this.user + ' }';\r\n            const completeDonner = JSON.parse(this.donner);\r\n            await this.utils.presentLoading(\"Please wait...\");\r\n            this.saveHttpReq(completeDonner).subscribe(data => {\r\n                    this.utils.stopLoading();\r\n                    this.utils.presentAlert('Please! check your email and activate your account.');\r\n                    this.router.navigate(['login']);\r\n                },\r\n                error => {\r\n                    this.utils.stopLoading();\r\n                    console.log('error', error);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    saveHttpReq(dataObj): Observable<any> {\r\n        const url = `${this.service.homeUrl}/donners/newDonner`;\r\n        const test = this.http.post(url, dataObj);\r\n        this.loading = false;\r\n        return test;\r\n    }\r\n\r\n    onFoucusOut() {\r\n        const test = this.registerDonnerForm.value;\r\n        const item = test.address;\r\n        const str = '    ';\r\n        if (!str.replace(/\\s/g, '').length) {\r\n        }\r\n        if (item === '' || item == null) {\r\n            this.addressVerification = true;\r\n        }\r\n    }\r\n\r\n    removeError() {\r\n        this.addressVerification = false;\r\n    }\r\n\r\n    onFoucusOutContact() {\r\n        const test = this.registerDonnerForm.value;\r\n        const item = test.contact;\r\n        const str = '    ';\r\n        if (!str.replace(/\\s/g, '').length) {\r\n        }\r\n        if (item === '' || item == null) {\r\n            this.contactEmptyCheck = true;\r\n        }\r\n    }\r\n\r\n    removeErrorContact() {\r\n        this.contactEmptyCheck = false;\r\n    }\r\n}\r\n"],"sourceRoot":""}